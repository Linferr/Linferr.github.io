<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt Upper Computer Serial Port</title>
    <url>/2024/07/11/Qt-Upper-Computer-Serial-Port/</url>
    <content><![CDATA[<h2 id="Serial-Port"><a href="#Serial-Port" class="headerlink" title="Serial Port"></a>Serial Port</h2><p>Recently, I’ve been learning how to develop an upper computer using Qt. Along the way, I’ve encountered numerous peculiar challenges and learned a great deal. I’ve decided to document these issues and their solutions in a series of articles. This serves as both a personal record for myself and as inspiration for others who may encounter similar hurdles.</p>
<h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3><p>Create a new Widget project in Qt Creator.</p>
<ol>
<li>Select <strong>Qt Widgets Application</strong>.</li>
<li>Set the project name to <strong>Qtsp</strong>.</li>
<li>Choose <strong>qmake</strong> as the build system.</li>
<li>Use <strong>QWidget</strong> as the base class.</li>
<li>Continue with the default settings and click <strong>Next</strong>.</li>
</ol>
<p>Open the project and you will see a file called <code>widget.ui</code>. This file makes it easy to create a simple UI. Although you can write code in <code>widget.cpp</code> to create the interface, this guide is aimed at beginners, so we’ll use <code>widget.ui</code> for simplicity.</p>
<p>Here is the widget I created, which includes:</p>
<ul>
<li>Combobox</li>
<li>Label</li>
<li>PushButton</li>
<li>LineEdit</li>
<li>PlainTextEdit</li>
</ul>
<p><img src="/ui.png" alt="Qt Serial Port UI"> </p>
<p>Also, remember to rename these widgets to make coding easier later on.<br><img src="/renameui.png" alt="rename widget"></p>
<h3 id="QSerialPort"><a href="#QSerialPort" class="headerlink" title="QSerialPort"></a>QSerialPort</h3><h4 id="pro"><a href="#pro" class="headerlink" title=".pro"></a>.pro</h4><p>In Qt, the <code>QSerialPort</code> class is essential for serial communication. To use it, you need to add the following line to your <code>.pro</code> file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QT       += serialport</span><br></pre></td></tr></table></figure>
<h4 id="Widget-h"><a href="#Widget-h" class="headerlink" title="Widget.h"></a>Widget.h</h4><p>Then, include the necessary headers in your source file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPort&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPortInfo&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Also, there are some common issues with the QSerialPort library:</p>
<ol>
<li><p>The serial port library seems to be an independent module, which needs to be installed manually using the Qt Maintenance Tool. To choose the correct version, manually check in Project -&gt; Manage Kits. It seems like using </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qmake -v </span><br></pre></td></tr></table></figure>
<p>and Help -&gt; About Qt Creator are both not accurate. </p>
</li>
<li><p>If you have previously installed Anaconda, it might have set an old Qt version in the PATH, causing conflicts with the current kit.</p>
</li>
</ol>
<h3 id="Implementing-the-Logic"><a href="#Implementing-the-Logic" class="headerlink" title="Implementing the Logic"></a>Implementing the Logic</h3><h4 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h4><p>Define the following slots in your class:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">openButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">closeButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialPortReadyRead</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>Define the private members in your class:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui; </span><br><span class="line">    QSerialPort *serialPort; </span><br></pre></td></tr></table></figure>

<p>Here is the implementation in widget.cpp:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>Widget:: indicates that the following Widget function is a member function of the Widget class.</li>
<li>Widget is the name of the constructor. The constructor’s name must be the same as the class name.</li>
<li>(QWidget *parent) indicates the parameter list of the constructor. The constructor takes a pointer to a QWidget object named parent, which is used to specify the parent object.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    <span class="comment">//  Initialization list to initialize the base class and member variables of the Widget class (i.e., the class variables)</span></span><br><span class="line"></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    , <span class="built_in">serialPort</span>(<span class="keyword">new</span> <span class="built_in">QSerialPort</span>(<span class="keyword">this</span>)) <span class="comment">// this points to the Widget object being created. When you use this in a member function, it points to the current object&#x27;s address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor bofy</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use QSerialPortInfo::availablePorts() to get available serial port information and add them to the ComboBox</span></span><br><span class="line">    QStringList serialNamePort;</span><br><span class="line">    foreach (<span class="type">const</span> QSerialPortInfo &amp;info, QSerialPortInfo::<span class="built_in">availablePorts</span>()) &#123;</span><br><span class="line">        serialNamePort &lt;&lt; info.<span class="built_in">portName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Display available serial ports in the UI</span></span><br><span class="line">    ui-&gt;comBox-&gt;<span class="built_in">addItems</span>(serialNamePort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// baud rate</span></span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;9600&quot;</span>);</span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;115200&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data bit</span></span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stop bit</span></span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parity</span></span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;Even&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect the serial port&#x27;s readyRead signal to the slot function serialPortReadyRead</span></span><br><span class="line">    <span class="built_in">connect</span>(serialPort, &amp;QSerialPort::readyRead, <span class="keyword">this</span>, &amp;Widget::serialPortReadyRead);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the window size to fit the content</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">adjustSize</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Implement the corresponding slot functions:</p>
<ol>
<li>Get the serial port parameters from the ComboBox and set them to the QSerialPort object.</li>
<li>Open the serial port, display a success message if successful, and an error message if failed.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::openButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">setPortName</span>(ui-&gt;comBox-&gt;<span class="built_in">currentText</span>());</span><br><span class="line">    serialPort-&gt;<span class="built_in">setBaudRate</span>(ui-&gt;baudBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>());</span><br><span class="line">    <span class="comment">// QSerialPort::DataBits is an enum type function in the QSerialPort namespace to ensure the validity of the data bits</span></span><br><span class="line">    serialPort-&gt;<span class="built_in">setDataBits</span>(QSerialPort::<span class="built_in">DataBits</span>(ui-&gt;dataBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line">    serialPort-&gt;<span class="built_in">setStopBits</span>(QSerialPort::<span class="built_in">StopBits</span>(ui-&gt;stopBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;None&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::NoParity);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;Even&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::EvenParity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serialPort-&gt;<span class="built_in">open</span>(QIODevice::ReadWrite)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Serial port opened&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Failed to open serial port.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Close the serial port and display a message:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::closeButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">close</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Serial port closed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Send the data entered by the user through the serial port:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::sendButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">write</span>(ui-&gt;lineEdit-&gt;<span class="built_in">text</span>().<span class="built_in">toLocal8Bit</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Clear the content in the receiving area:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::clearButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Read the serial port data and display it in the receiving area</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::serialPortReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QByteArray data = serialPort-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">appendPlainText</span>(<span class="built_in">QString</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Executable-Generation-and-Running-on-Windows"><a href="#Executable-Generation-and-Running-on-Windows" class="headerlink" title="Executable Generation and Running on Windows"></a>Executable Generation and Running on Windows</h3><p>To generate the executable file and run it on Windows, build the project in release mode. Ensure you use the following command to set the PATH, prioritizing Qt’s directory over Anaconda’s, to match the Qt Creator suite:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;your Qt bin&quot;</span>;%PATH:<span class="string">&quot;your anaconda bin&quot;</span>;=%</span><br></pre></td></tr></table></figure>
<p>Also to use this to check:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %PATH%</span><br></pre></td></tr></table></figure>

<p>Go to your Release folder and use windeployqt to generate all the necessary DLLs for the executable:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windeployqt Qtsp.exe</span><br></pre></td></tr></table></figure>
<p>If there are any missing files or errors, you can use a tool called “DependenciesGui” to check. </p>
<p>Common issues include missing DLLs like libstdc++-6.dll. Place these missing DLLs in the same directory as your executable.<br>Common missing DLLs:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libstdc++-6.dll</span><br><span class="line">libgcc_s_seh-1.dll</span><br><span class="line">libwinpthread-1.dll</span><br></pre></td></tr></table></figure>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><h3 id="Serial-Port-Detection-Issues-ESP8266"><a href="#Serial-Port-Detection-Issues-ESP8266" class="headerlink" title="Serial Port Detection Issues(ESP8266)"></a>Serial Port Detection Issues(ESP8266)</h3><p>When attempting to detect the serial port with the executable and PuTTY, neither could recognize the ESP8266. However, the Arduino IDE successfully uploads code and enables basic WiFi functionality. This ruled out serial port occupation (confirmed via regedit) and confirmed that NodeMCU can perform firmware flashing. The issue is likely due to the USB cable being used.</p>
<p>Since both PuTTY and my executable use the serial port, a USB-to-Serial (TTL) adapter is likely needed. A standard USB-to-Type-C cable is insufficient. For testing, use either a USB-to-Serial (TTL) adapter or an Arduino board as an intermediary (this should work).</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Serial Port</tag>
        <tag>Guide</tag>
        <tag>Tricky bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt Upper Computer UDP</title>
    <url>/2024/07/11/Qt-Upper-Computer-UDP/</url>
    <content><![CDATA[<h2 id="User-Datagram-Protocol-UDP"><a href="#User-Datagram-Protocol-UDP" class="headerlink" title="User Datagram Protocol(UDP)"></a>User Datagram Protocol(UDP)</h2><p>这篇文章中我主要针对利用qt实现一个简单的udp链接，功能包括autoconfig当前ip addr和可用port，bind，open，close, send msg。同时它也可以手动选择外接设备的ip address。</p>
<h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3><p>项目的创建和UI的搭建可以参考之前的这篇文章：<a href="/2024/07/11/Qt-Upper-Computer-Serial-Port/" title="Qt Upper Computer Serial Port">[Qt Upper Computer Serial Port]</a></p>
<p>Here is the widget I created, which includes:</p>
<ul>
<li>Label：local addr，local port，remote addr, remote port</li>
<li>LineEdit: 为了输入ip</li>
<li>PushButton: AutoConfig, Bind, Open, Close, Send</li>
<li>TextEDIT: For send and receive message</li>
</ul>
<h3 id="Implementing-the-Logic"><a href="#Implementing-the-Logic" class="headerlink" title="Implementing the Logic"></a>Implementing the Logic</h3><h4 id="pro"><a href="#pro" class="headerlink" title=".pro"></a>.pro</h4><p>In .pro, we add this line to use a new class called “network”</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QT       += network</span><br></pre></td></tr></table></figure>
<h4 id="UDPSocket-h"><a href="#UDPSocket-h" class="headerlink" title="UDPSocket.h"></a>UDPSocket.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UDPSOCKET_H <span class="comment">//防止头文件重复包含。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDPSOCKET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span> <span class="comment">//是 Qt 的核心类，提供了信号和槽机制。</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QUdpSocket&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QHostAddress&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个名为 CUdpSocket 的类，继承自 QObject</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CUdpSocket</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Q_OBJECT 是 Qt 的一个宏，用于启用信号和槽机制。</span></span><br><span class="line">    <span class="comment">//如果你在类中使用了信号和槽，就必须在类定义中包含 Q_OBJECT 宏。这个宏是 Qt 的元对象系统的一部分，它提供了运行时类型信息和动态属性系统。</span></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//explicit 关键字：防止构造函数的隐式转换。</span></span><br><span class="line">    <span class="comment">//CUdpSocket(QObject *parent = nullptr)：这是构造函数，用于初始化对象。在 Qt 中，大多数对象都有一个父对象，父对象负责内存管理。parent 参数默认为 nullptr，表示没有父对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">CUdpSocket</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="comment">//析构函数用于在对象销毁时释放资源。</span></span><br><span class="line">    ~<span class="built_in">CUdpSocket</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类的成员函数。具体将在.cpp中实现</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bind</span><span class="params">(<span class="type">const</span> QHostAddress &amp;address, ushort port)</span></span>; <span class="comment">// 绑定本机的IP和端口号信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendData</span><span class="params">(QString data)</span></span>;                         <span class="comment">// 发送数据</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTargetInfo</span><span class="params">(QString ip, quint16 port)</span></span>;        <span class="comment">// 设置目标主机的IP和端口号</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;                                        <span class="comment">// 关闭UDP套接字</span></span><br><span class="line">    <span class="function">quint16 <span class="title">localPort</span><span class="params">()</span></span>;                                 <span class="comment">// 获取本地端口号</span></span><br><span class="line">    <span class="function">QString <span class="title">lastError</span><span class="params">()</span></span>;                                 <span class="comment">// 获取最后的错误信息</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resetSocket</span><span class="params">()</span></span>;                                  <span class="comment">// 重置套接字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//信号和槽函数</span></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// 传递接收到的数据</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recvDataSignal</span><span class="params">(QString data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// 读取数据的槽函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_readyReadData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员变量设为私有是为了封装数据，确保类的内部状态的完整性和安全性。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QUdpSocket *m_sock;        <span class="comment">// UDP套接字指针</span></span><br><span class="line">    QHostAddress m_hostAddr;   <span class="comment">// 目标地址对象</span></span><br><span class="line">    quint16 m_port;            <span class="comment">// 目标端口号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// UDPSOCKET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="UDPSocket-cpp"><a href="#UDPSocket-cpp" class="headerlink" title="UDPSocket.cpp"></a>UDPSocket.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UdpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CUdpSocket::<span class="built_in">CUdpSocket</span>(QObject *parent) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建UDP套接字内存空间</span></span><br><span class="line">    m_sock = <span class="keyword">new</span> QUdpSocket;</span><br><span class="line">    <span class="comment">// 连接数据读取信号槽</span></span><br><span class="line">    <span class="built_in">connect</span>(m_sock, &amp;QUdpSocket::readyRead, <span class="keyword">this</span>, &amp;CUdpSocket::on_readyReadData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CUdpSocket::~<span class="built_in">CUdpSocket</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 释放UDP套接字内存空间</span></span><br><span class="line">    <span class="keyword">delete</span> m_sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CUdpSocket::bind</span><span class="params">(<span class="type">const</span> QHostAddress &amp;address, ushort port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">bind</span>(address, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::sendData</span><span class="params">(QString data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 发送传入的数据到指定的信息的位置</span></span><br><span class="line">    m_sock-&gt;<span class="built_in">writeDatagram</span>(data.<span class="built_in">toUtf8</span>(), m_hostAddr, m_port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::setTargetInfo</span><span class="params">(QString ip, quint16 port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_hostAddr = <span class="built_in">QHostAddress</span>(ip);</span><br><span class="line">    m_port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">quint16 <span class="title">CUdpSocket::localPort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">localPort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::on_readyReadData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 通过函数判断当前是否有等待读取的数据并循环获取</span></span><br><span class="line">    <span class="keyword">while</span>(m_sock-&gt;<span class="built_in">hasPendingDatagrams</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 创建数据存储容器，并设置长度为将接收的数据长度</span></span><br><span class="line">        QByteArray data;</span><br><span class="line">        data.<span class="built_in">resize</span>(m_sock-&gt;<span class="built_in">pendingDatagramSize</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取数据并保存信息发送者的地址和ip(方便发送时指定发送位置)</span></span><br><span class="line">        m_sock-&gt;<span class="built_in">readDatagram</span>(data.<span class="built_in">data</span>(), data.<span class="built_in">size</span>(), &amp;m_hostAddr, &amp;m_port);</span><br><span class="line">        <span class="comment">// 发送接收数据的信号</span></span><br><span class="line">        <span class="function">emit <span class="title">recvDataSignal</span><span class="params">(QString(data))</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_sock-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">CUdpSocket::lastError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">errorString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::resetSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_sock-&gt;<span class="built_in">state</span>() != QAbstractSocket::UnconnectedState) &#123;</span><br><span class="line">        m_sock-&gt;<span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Widget-h"><a href="#Widget-h" class="headerlink" title="Widget.h"></a>Widget.h</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UdpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bind_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Open_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Close_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Send_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AutoConfig_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleReceivedData</span><span class="params">(QString data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    CUdpSocket *udpSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">getLocalIPAddress</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QNetworkInterface&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    ,<span class="built_in">udpSocket</span>(<span class="keyword">new</span> <span class="built_in">CUdpSocket</span>(<span class="keyword">this</span>))</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect the received data signal to the handler</span></span><br><span class="line">    <span class="built_in">connect</span>(udpSocket, &amp;CUdpSocket::recvDataSignal, <span class="keyword">this</span>, &amp;Widget::handleReceivedData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect buttons to their respective slots</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Bind, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Bind_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Open, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Open_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Close, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Close_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Send, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Send_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;AutoConfig, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::AutoConfig_clicked);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Automatically detect and set the local IP address</span></span><br><span class="line">    <span class="comment">// ui-&gt;lineLocalAddr-&gt;setText(getLocalIPAddress());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">Widget::getLocalIPAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QList&lt;QHostAddress&gt; ipAddressesList = QNetworkInterface::<span class="built_in">allAddresses</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ipAddressesList.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ipAddressesList.<span class="built_in">at</span>(i) != QHostAddress::LocalHost &amp;&amp;</span><br><span class="line">            ipAddressesList.<span class="built_in">at</span>(i).<span class="built_in">toIPv4Address</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ipAddressesList.<span class="built_in">at</span>(i).<span class="built_in">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QHostAddress</span>(QHostAddress::LocalHost).<span class="built_in">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Bind_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString localAddress = ui-&gt;lineLocalAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort localPort = ui-&gt;lineLocalPort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">resetSocket</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Trying to bind to IP:&quot;</span> &lt;&lt; localAddress &lt;&lt; <span class="string">&quot;Port:&quot;</span> &lt;&lt; localPort;</span><br><span class="line">    <span class="keyword">if</span> (udpSocket-&gt;<span class="built_in">bind</span>(<span class="built_in">QHostAddress</span>(localAddress), localPort)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Bind successful. Using IP: &quot;</span> + localAddress + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QString errorMsg = udpSocket-&gt;<span class="built_in">lastError</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Bind failed with IP:&quot;</span> &lt;&lt; localAddress &lt;&lt; <span class="string">&quot;Port:&quot;</span> &lt;&lt; localPort &lt;&lt; <span class="string">&quot;Error:&quot;</span> &lt;&lt; errorMsg;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Bind failed: &quot;</span> + errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Open_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString remoteAddress = ui-&gt;lineRemoteAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort remotePort = ui-&gt;lineRemotePort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">setTargetInfo</span>(remoteAddress, remotePort);</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Remote address set to: &quot;</span> + remoteAddress + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(remotePort));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Close_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    udpSocket-&gt;<span class="built_in">close</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Send_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString remoteAddress = ui-&gt;lineRemoteAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort remotePort = ui-&gt;lineRemotePort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line">    QString data = ui-&gt;textSend-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">setTargetInfo</span>(remoteAddress, remotePort);</span><br><span class="line">    udpSocket-&gt;<span class="built_in">sendData</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::handleReceivedData</span><span class="params">(QString data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;textReceive-&gt;<span class="built_in">append</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::AutoConfig_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 自动获取本地IP地址并设置</span></span><br><span class="line">    QString localIP = <span class="built_in">getLocalIPAddress</span>();</span><br><span class="line">    ui-&gt;lineLocalAddr-&gt;<span class="built_in">setText</span>(localIP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动分配端口号</span></span><br><span class="line">    <span class="keyword">if</span> (udpSocket-&gt;<span class="built_in">bind</span>(<span class="built_in">QHostAddress</span>(localIP), <span class="number">0</span>)) &#123;</span><br><span class="line">        ushort localPort = udpSocket-&gt;<span class="built_in">localPort</span>();</span><br><span class="line">        ui-&gt;lineLocalPort-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Auto configuration successful. Using IP: &quot;</span> + localIP + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Auto configuration failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Executable-Generation-and-Running-on-Windows"><a href="#Executable-Generation-and-Running-on-Windows" class="headerlink" title="Executable Generation and Running on Windows"></a>Executable Generation and Running on Windows</h3><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2>]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Guide</tag>
        <tag>Tricky bugs</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
</search>
