<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Qt Upper Computer Serial Port</title>
    <url>/2024/07/11/Qt-Upper-Computer-Serial-Port/</url>
    <content><![CDATA[<h2 id="Serial-Port"><a href="#Serial-Port" class="headerlink" title="Serial Port"></a>Serial Port</h2><p>Recently, I’ve been learning how to develop an upper computer using Qt. Along the way, I’ve encountered numerous peculiar challenges and learned a great deal. I’ve decided to document these issues and their solutions in a series of articles. This serves as both a personal record for myself and as inspiration for others who may encounter similar hurdles.</p>
<h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3><p>Create a new Widget project in Qt Creator.</p>
<ol>
<li>Select <strong>Qt Widgets Application</strong>.</li>
<li>Set the project name to <strong>Qtsp</strong>.</li>
<li>Choose <strong>qmake</strong> as the build system.</li>
<li>Use <strong>QWidget</strong> as the base class.</li>
<li>Continue with the default settings and click <strong>Next</strong>.</li>
</ol>
<p>Open the project and you will see a file called <code>widget.ui</code>. This file makes it easy to create a simple UI. Although you can write code in <code>widget.cpp</code> to create the interface, this guide is aimed at beginners, so we’ll use <code>widget.ui</code> for simplicity.</p>
<p>Here is the widget I created, which includes:</p>
<ul>
<li>Combobox</li>
<li>Label</li>
<li>PushButton</li>
<li>LineEdit</li>
<li>PlainTextEdit</li>
</ul>
<p><img src="/ui.png" alt="Qt Serial Port UI"> </p>
<p>Also, remember to rename these widgets to make coding easier later on.<br><img src="/renameui.png" alt="rename widget"></p>
<h3 id="QSerialPort"><a href="#QSerialPort" class="headerlink" title="QSerialPort"></a>QSerialPort</h3><p>In Qt, the <code>QSerialPort</code> class is essential for serial communication. To use it, you need to add the following line to your <code>.pro</code> file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QT       += serialport</span><br></pre></td></tr></table></figure>
<p>Then, include the necessary headers in your source file:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPort&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPortInfo&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>Also, there are some common issues with the QSerialPort library:</p>
<ol>
<li><p>The serial port library seems to be an independent module, which needs to be installed manually using the Qt Maintenance Tool. To choose the correct version, manually check in Project -&gt; Manage Kits. It seems like using </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qmake -v </span><br></pre></td></tr></table></figure>
<p>and Help -&gt; About Qt Creator are both not accurate. </p>
</li>
<li><p>If you have previously installed Anaconda, it might have set an old Qt version in the PATH, causing conflicts with the current kit.</p>
</li>
</ol>
<h3 id="Implementing-the-Logic"><a href="#Implementing-the-Logic" class="headerlink" title="Implementing the Logic"></a>Implementing the Logic</h3><p>Define the following slots in your class:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">openButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">closeButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialPortReadyRead</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>Define the private members in your class:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui; </span><br><span class="line">    QSerialPort *serialPort; </span><br></pre></td></tr></table></figure>

<p>Here is the implementation in widget.cpp:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>Widget:: indicates that the following Widget function is a member function of the Widget class.</li>
<li>Widget is the name of the constructor. The constructor’s name must be the same as the class name.</li>
<li>(QWidget *parent) indicates the parameter list of the constructor. The constructor takes a pointer to a QWidget object named parent, which is used to specify the parent object.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    <span class="comment">//  Initialization list to initialize the base class and member variables of the Widget class (i.e., the class variables)</span></span><br><span class="line"></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    , <span class="built_in">serialPort</span>(<span class="keyword">new</span> <span class="built_in">QSerialPort</span>(<span class="keyword">this</span>)) <span class="comment">// this points to the Widget object being created. When you use this in a member function, it points to the current object&#x27;s address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor bofy</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use QSerialPortInfo::availablePorts() to get available serial port information and add them to the ComboBox</span></span><br><span class="line">    QStringList serialNamePort;</span><br><span class="line">    foreach (<span class="type">const</span> QSerialPortInfo &amp;info, QSerialPortInfo::<span class="built_in">availablePorts</span>()) &#123;</span><br><span class="line">        serialNamePort &lt;&lt; info.<span class="built_in">portName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Display available serial ports in the UI</span></span><br><span class="line">    ui-&gt;comBox-&gt;<span class="built_in">addItems</span>(serialNamePort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// baud rate</span></span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;9600&quot;</span>);</span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;115200&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data bit</span></span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stop bit</span></span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parity</span></span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;Even&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect the serial port&#x27;s readyRead signal to the slot function serialPortReadyRead</span></span><br><span class="line">    <span class="built_in">connect</span>(serialPort, &amp;QSerialPort::readyRead, <span class="keyword">this</span>, &amp;Widget::serialPortReadyRead);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the window size to fit the content</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">adjustSize</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Implement the corresponding slot functions:</p>
<ol>
<li>Get the serial port parameters from the ComboBox and set them to the QSerialPort object.</li>
<li>Open the serial port, display a success message if successful, and an error message if failed.</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::openButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">setPortName</span>(ui-&gt;comBox-&gt;<span class="built_in">currentText</span>());</span><br><span class="line">    serialPort-&gt;<span class="built_in">setBaudRate</span>(ui-&gt;baudBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>());</span><br><span class="line">    <span class="comment">// QSerialPort::DataBits is an enum type function in the QSerialPort namespace to ensure the validity of the data bits</span></span><br><span class="line">    serialPort-&gt;<span class="built_in">setDataBits</span>(QSerialPort::<span class="built_in">DataBits</span>(ui-&gt;dataBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line">    serialPort-&gt;<span class="built_in">setStopBits</span>(QSerialPort::<span class="built_in">StopBits</span>(ui-&gt;stopBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;None&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::NoParity);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;Even&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::EvenParity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serialPort-&gt;<span class="built_in">open</span>(QIODevice::ReadWrite)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;串口打开成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;串口打开失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Close the serial port and display a message:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::closeButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">close</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;提示&quot;</span>, <span class="string">&quot;串口已关闭&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Send the data entered by the user through the serial port:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::sendButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">write</span>(ui-&gt;lineEdit-&gt;<span class="built_in">text</span>().<span class="built_in">toLocal8Bit</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Clear the content in the receiving area:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::clearButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Read the serial port data and display it in the receiving area</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::serialPortReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QByteArray data = serialPort-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">appendPlainText</span>(<span class="built_in">QString</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Executable-Generation-and-Running-on-Windows"><a href="#Executable-Generation-and-Running-on-Windows" class="headerlink" title="Executable Generation and Running on Windows"></a>Executable Generation and Running on Windows</h3><p>To generate the executable file and run it on Windows, build the project in release mode. Ensure you use the following command to set the PATH, prioritizing Qt’s directory over Anaconda’s, to match the Qt Creator suite:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;your Qt bin&quot;</span>;%PATH:<span class="string">&quot;your anaconda bin&quot;</span>;=%</span><br></pre></td></tr></table></figure>
<p>Also to use this to check:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> %PATH%</span><br></pre></td></tr></table></figure>

<p>Go to your Release folder and use windeployqt to generate all the necessary DLLs for the executable:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">windeployqt Qtsp.exe</span><br></pre></td></tr></table></figure>
<p>If there are any missing files or errors, you can use a tool called “DependenciesGui” to check. </p>
<p>Common issues include missing DLLs like libstdc++-6.dll. Place these missing DLLs in the same directory as your executable.<br>Common missing DLLs:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">libstdc++-6.dll</span><br><span class="line">libgcc_s_seh-1.dll</span><br><span class="line">libwinpthread-1.dll</span><br></pre></td></tr></table></figure>
<h3 id="Serial-Port-Detection-Issues-ESP8266"><a href="#Serial-Port-Detection-Issues-ESP8266" class="headerlink" title="Serial Port Detection Issues(ESP8266)"></a>Serial Port Detection Issues(ESP8266)</h3><p>When attempting to detect the serial port with the executable and PuTTY, neither could recognize the ESP8266. However, the Arduino IDE successfully uploads code and enables basic WiFi functionality. This ruled out serial port occupation (confirmed via regedit) and confirmed that NodeMCU can perform firmware flashing. The issue is likely due to the USB cable being used.</p>
<p>Since both PuTTY and my executable use the serial port, a USB-to-Serial (TTL) adapter is likely needed. A standard USB-to-Type-C cable is insufficient. For testing, use either a USB-to-Serial (TTL) adapter or an Arduino board as an intermediary (this should work).</p>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>Serial Port</tag>
        <tag>Guide</tag>
        <tag>Tricky bugs</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/07/10/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
