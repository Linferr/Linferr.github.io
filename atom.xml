<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://linferr.github.io/atom.xml" rel="self"/>
  
  <link href="http://linferr.github.io/"/>
  <updated>2024-07-18T06:35:03.222Z</updated>
  <id>http://linferr.github.io/</id>
  
  <author>
    <name>Linferr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Qt Style Sheets(QSS)</title>
    <link href="http://linferr.github.io/2024/07/18/Qt-Style-Sheets/"/>
    <id>http://linferr.github.io/2024/07/18/Qt-Style-Sheets/</id>
    <published>2024-07-18T06:27:07.000Z</published>
    <updated>2024-07-18T06:35:03.222Z</updated>
    
    <content type="html"><![CDATA[<div class="note primary">            <h4 id="本文内容参考"><a href="#本文内容参考" class="headerlink" title="本文内容参考"></a>本文内容参考</h4><p><a href="https://smartadpole.github.io/software/qt/qss/">「QT」界面美化</a><br><a href="https://blog.csdn.net/qq21497936/article/details/79401577"> QSS样式表笔记大全系列 </a></p>          </div>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note primary&quot;&gt;
            &lt;h4 id=&quot;本文内容参考&quot;&gt;&lt;a href=&quot;#本文内容参考&quot; class=&quot;headerlink&quot; title=&quot;本文内容参考&quot;&gt;&lt;/a&gt;本文内容参考&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https:</summary>
      
    
    
    
    <category term="Qt" scheme="http://linferr.github.io/categories/Qt/"/>
    
    
    <category term="QSS" scheme="http://linferr.github.io/tags/QSS/"/>
    
    <category term="Guide" scheme="http://linferr.github.io/tags/Guide/"/>
    
    <category term="Styling" scheme="http://linferr.github.io/tags/Styling/"/>
    
  </entry>
  
  <entry>
    <title>Qt Upper Computer matlab</title>
    <link href="http://linferr.github.io/2024/07/17/Qt-Upper-Computer-matlab/"/>
    <id>http://linferr.github.io/2024/07/17/Qt-Upper-Computer-matlab/</id>
    <published>2024-07-17T06:13:56.000Z</published>
    <updated>2024-07-18T06:27:57.854Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon">            <h2 id="Qt-Creator-调用matlab函数"><a href="#Qt-Creator-调用matlab函数" class="headerlink" title="Qt Creator 调用matlab函数"></a>Qt Creator 调用matlab函数</h2>          </div><p>本文主要实现利用Qt做一个调用matlab函数的上位机。Qt的UI界面比较简洁，只有两个函数input的输入口和一个send按钮。<br>Matlab的函数主要效果是通过相位设计算法反射面的相位数据，并将这些数据转换为指定格式，然后通过 UDP 协议发送到指定的目标设备。</p><span id="more"></span><div class="note default">            <h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3>          </div><p>项目创建和UI设计本文不再赘述，详情可以参考我之前的文章。</p><div class="note info no-icon">            <h2 id="Matlab部分打包"><a href="#Matlab部分打包" class="headerlink" title="Matlab部分打包"></a>Matlab部分打包</h2>          </div><p>我将本文主要分成两个部分，一个是关于matlab函数的打包，另一个部分是关于Qt Creator的调用。首先我们来看matlab部分的函数打包过程；</p><div class="note default">            <h3 id="Matlab函数实现效果"><a href="#Matlab函数实现效果" class="headerlink" title="Matlab函数实现效果"></a>Matlab函数实现效果</h3>          </div><p>其实就Qt调用matlab函数这一功能而言，可以不是很需要关心matlab函数的效果，不过此处可以简单介绍下函数的效果。</p><p>matlab函数具体功能包括：</p><ol><li>设置和初始化 UDP 通信参数。</li><li>使用matlab的函数生成相位设计。</li><li>将相位数据转换为十六进制字符串和字节数据。</li><li>通过 UDP 端口将数据发送到目标设备。</li></ol><div class="note default">            <h3 id="Matlab函数打包"><a href="#Matlab函数打包" class="headerlink" title="Matlab函数打包"></a>Matlab函数打包</h3>          </div><div class="tabs" id="step"><ul class="nav-tabs"><li class="tab active"><a href="#step-1">Step 1</a></li><li class="tab"><a href="#step-2">Step 2</a></li><li class="tab"><a href="#step-3">Step 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="step-1"><p>首先第一点，我们需要保证matlab部分的代码都是fuction函数而不是具体的脚本script。<br>接着我们在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mbuild -setup</span><br></pre></td></tr></table></figure><p>他会出现如下内容：<br><img src="/2024/07/17/Qt-Upper-Computer-matlab/mbuild.png" alt="mbuild -setup"><br>点击出现的选项” mex -setup C++ -client MBUILD “</p><p>如果说你的matlab没有安装mingw64，按照提示安装即可。若是电脑以及安装但是matlab没有识别到，可以使用如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setenv(<span class="string">&#x27;MW_MINGW64_LOC&#x27;</span>, <span class="string">&#x27;C:\mingw64&#x27;</span>) //<span class="string">&#x27;C:\mingw64&#x27;</span>换成你自己的路径</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="step-2"><p>接着我们输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deploytool</span><br></pre></td></tr></table></figure><p>等待弹出窗口，如下图，选择Library Compiler<br><img src="/2024/07/17/Qt-Upper-Computer-matlab/deploytool.png" alt="deploytool"></p></div><div class="tab-pane" id="step-3"><p>接着首先选择左上角C++ Shared Library，然后点击右侧加号，选择所需要的所有.m文件（第一个放进去的会是你打包的文件名字）。<br>如图所示，下面会显示生成的三个我们需要的文件：sendudp.dll, sendudp.lib，sendudp.h:<br><img src="/2024/07/17/Qt-Upper-Computer-matlab/package.png" alt="package"></p></div></div></div><div class="note info no-icon">            <h2 id="Qt-Creator调用"><a href="#Qt-Creator调用" class="headerlink" title="Qt Creator调用"></a>Qt Creator调用</h2>          </div><p>这一部分我简单分成了两块，第一块涉及一些文件创建和路径配置，第二部分是具体函数调用。</p><div class="note default">            <h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3>          </div><div class="tabs" id="section"><ul class="nav-tabs"><li class="tab active"><a href="#section-1">Section 1</a></li><li class="tab"><a href="#section-2">Section 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="section-1"><div class="note ">            <p><strong>基本文件放置</strong></p>          </div><p>我们主要用到的文件有”sendudp.dll”, “sendudp.lib”，”sendudp.h”<br>首先，我们在Qt的工程文件夹下创建 lib和 include文件夹:</p><ol><li>将”sendudp.dll”, “sendudp.lib”放到lib文件夹下，</li><li>将”sendudp.h”放到include文件夹下。</li></ol></div><div class="tab-pane" id="section-2"><div class="note ">            <p><strong>.pro文件路径配置</strong></p>          </div>在.pro文件中，我们增加如下代码：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 配置包含路径,有空格用quote</span><br><span class="line">INCLUDEPATH += $$<span class="built_in">quote</span>(C:/Program Files/MATLAB/R2022b/<span class="keyword">extern</span>/include)</span><br><span class="line"></span><br><span class="line"># 配置库路径</span><br><span class="line">LIBS += -L$$<span class="built_in">quote</span>(C:/Program Files/MATLAB/R2022b/<span class="keyword">extern</span>/lib/win64/microsoft) -lmclmcr -lmclmcrrt -llibmx</span><br><span class="line"></span><br><span class="line"># Qt项目中创建的库和头文件路径(将sendudp改成你的matlab打包文件名)</span><br><span class="line">win32: LIBS += -L$$PWD/lib/ -lsendudp</span><br><span class="line"></span><br><span class="line">INCLUDEPATH += $$PWD/include</span><br><span class="line">DEPENDPATH += $$PWD/include</span><br></pre></td></tr></table></figure></div></div></div><div class="note default">            <h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3>          </div><h4 id="widget-h"><a href="#widget-h" class="headerlink" title="widget.h"></a>widget.h</h4><p>在widget.h中加上所需要的槽函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">send_clicked</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h4 id="widget-cpp"><a href="#widget-cpp" class="headerlink" title="widget.cpp"></a>widget.cpp</h4><p>首先增加引用的头文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sendudp.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>在初始化部分，除了connect signal and slot，还需要初始化MATLAB 编译的库</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;send, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::send_clicked);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">mclInitializeApplication</span>(<span class="literal">nullptr</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="built_in">qFatal</span>(<span class="string">&quot;Could not initialize the application properly.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">sendudpInitialize</span>()) &#123;</span><br><span class="line">        <span class="built_in">qFatal</span>(<span class="string">&quot;Could not initialize the library properly.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的方式添加上终止函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">    <span class="built_in">sendudpTerminate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写我们需要的槽函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::send_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户输入的参数</span></span><br><span class="line">    <span class="type">double</span> fair = ui-&gt;fai-&gt;<span class="built_in">text</span>().<span class="built_in">toDouble</span>();</span><br><span class="line">    <span class="comment">//double thetar = ui-&gt;theta-&gt;text().toDouble();</span></span><br><span class="line">    QString thetaStr = ui-&gt;theta-&gt;<span class="built_in">text</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> thetar = <span class="built_in">convertInput</span>(thetaStr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出调试信息，检查输入值</span></span><br><span class="line">    <span class="comment">//qDebug() &lt;&lt; &quot;fair:&quot; &lt;&lt; fair;</span></span><br><span class="line">    <span class="comment">//qDebug() &lt;&lt; &quot;thetar:&quot; &lt;&lt; thetar;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将参数传递给 MATLAB 函数</span></span><br><span class="line">    <span class="function">mwArray <span class="title">fair_mw</span><span class="params">(fair)</span></span>;</span><br><span class="line">    <span class="function">mwArray <span class="title">thetar_mw</span><span class="params">(thetar)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用 MATLAB 编译的 DLL 函数</span></span><br><span class="line">    <span class="built_in">sendudp</span>(fair_mw, thetar_mw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能到这里有人会好奇，为什么这么引用matlab的函数，mwArray是什么，convertInput()又是啥。<br>接下来我们一个一个看：</p><div class="tabs" id="widget.cpp实现"><ul class="nav-tabs"><li class="tab active"><a href="#widget.cpp实现-1">widget.cpp实现 1</a></li><li class="tab"><a href="#widget.cpp实现-2">widget.cpp实现 2</a></li></ul><div class="tab-content"><div class="tab-pane active" id="widget.cpp实现-1"><div class="note ">            <p><strong>mwArray是什么</strong><br>首先我们打开sendudp.h，在最后几行我们可以看到这个头文件定义的三个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> LIB_sendudp_CPP_API <span class="type">void</span> MW_CALL_CONV <span class="title">bitsconvert</span><span class="params">(<span class="type">int</span> nargout, mwArray&amp; phase_converted, mwArray&amp; code, <span class="type">const</span> mwArray&amp; phase, <span class="type">const</span> mwArray&amp; bits)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> LIB_sendudp_CPP_API <span class="type">void</span> MW_CALL_CONV <span class="title">phaseDesign</span><span class="params">(<span class="type">int</span> nargout, mwArray&amp; phase, <span class="type">const</span> mwArray&amp; fair, <span class="type">const</span> mwArray&amp; thetar, <span class="type">const</span> mwArray&amp; M, <span class="type">const</span> mwArray&amp; N, <span class="type">const</span> mwArray&amp; dx, <span class="type">const</span> mwArray&amp; dy, <span class="type">const</span> mwArray&amp; lambda)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> LIB_sendudp_CPP_API <span class="type">void</span> MW_CALL_CONV <span class="title">sendudp</span><span class="params">(<span class="type">const</span> mwArray&amp; fair, <span class="type">const</span> mwArray&amp; thetar)</span></span>;</span><br></pre></td></tr></table></figure><ol><li>matlab一共打包了三个函数，前两个都是辅助函数，最重要的是最后一个sendudp(),他是我们需要调用的函数本体。</li><li>观察这个函数我们可以得知，他需要两个参数作为输入，分别是mwArray格式的fair和thetar。</li><li>mwArray 是 MATLAB Compiler SDK 提供的一个数据类型，用于在 C++ 中表示和操作 MATLAB 数据。</li></ol><p>小结：<br>sendudp 是一个 MATLAB 编译的 DLL 函数，期望接收 mwArray 类型的参数。将用户输入的数据转换为 mwArray 并传递给它，完成特定的计算或操作。</p>          </div></div><div class="tab-pane" id="widget.cpp实现-2"><div class="note ">            <p><strong>convertInput()是什么</strong></p>          </div><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ui-&gt;fai-&gt;<span class="built_in">text</span>().<span class="built_in">toDouble</span>();</span><br><span class="line">ui-&gt;theta-&gt;<span class="built_in">text</span>(); </span><br></pre></td></tr></table></figure><p>这两个是用于从用户界面的 QLineEdit 控件中获取用户输入的文本。 toDouble() 方法将字符串转换为 double 类型。<br>由于用户可能会输入诸如 pi&#x2F;6 这样的数学表达式，直接将字符串转换为 double 类型是不行的。这里我想通过 convertInput 函数将字符串解析为 double 类型。<br>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QRegularExpression&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QJSEngine&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">convertInput</span><span class="params">(<span class="type">const</span> QString&amp; input)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">const</span> QRegularExpression <span class="title">piRegex</span><span class="params">(<span class="string">&quot;\\bpi\\b&quot;</span>)</span></span>; <span class="comment">//匹配完整的单词 &quot;pi&quot;。 \\b 表示单词边界，确保只有单独的 &quot;pi&quot; 会被匹配，而不是诸如 &quot;piano&quot; 中的 &quot;pi&quot;。</span></span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">const</span> QRegularExpression <span class="title">eRegex</span><span class="params">(<span class="string">&quot;\\be\\b&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    QString processedInput = input;</span><br><span class="line">    processedInput.<span class="built_in">replace</span>(piRegex, <span class="string">&quot;3.141592653589793&quot;</span>); <span class="comment">//或者是180</span></span><br><span class="line">    processedInput.<span class="built_in">replace</span>(eRegex, <span class="string">&quot;2.718281828459045&quot;</span>);  <span class="comment">//将字符串中的 &quot;pi&quot; 和 &quot;e&quot; 替换为其数学常数值。</span></span><br><span class="line"></span><br><span class="line">    QJSEngine engine;                                     <span class="comment">// 创建一个 JavaScript 引擎实例，用于评估数学表达式。</span></span><br><span class="line">    QJSValue result = engine.<span class="built_in">evaluate</span>(processedInput);    <span class="comment">// 评估处理后的字符串，得到计算结果。 QJSEngine 可以解析和计算简单的数学表达式。</span></span><br><span class="line">    <span class="keyword">if</span> (result.<span class="built_in">isNumber</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> result.<span class="built_in">toNumber</span>();                         <span class="comment">// 如果评估结果是数字，则返回其数值。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">qWarning</span>() &lt;&lt; <span class="string">&quot;Invalid input: &quot;</span> &lt;&lt; input;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0</span>;                                       <span class="comment">// 如果评估结果不是数字，输出警告信息并返回默认值 0.0。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，如果用户在 QLineEdit 输入了 “pi&#x2F;6”，该函数会将 “pi” 替换为 “3.141592653589793”，然后使用 QJSEngine 评估 “3.141592653589793&#x2F;6”，最终返回结果 0.5235987755982988。</p></div></div></div><div class="note info no-icon">            <h2 id="exe文件界面优化"><a href="#exe文件界面优化" class="headerlink" title="exe文件界面优化"></a>exe文件界面优化</h2>          </div><div class="note default">            <h3 id="如何更改左上角程序名称"><a href="#如何更改左上角程序名称" class="headerlink" title="如何更改左上角程序名称"></a>如何更改左上角程序名称</h3>          </div><p>只需要在main函数里面添加  w.setWindowTitle(“your name”)即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line">    MainWindow w;</span><br><span class="line">    <span class="comment">//设置exe程序名</span></span><br><span class="line">    w.<span class="built_in">setWindowTitle</span>(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    w.<span class="built_in">show</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">exec</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note default">            <h3 id="修改图标"><a href="#修改图标" class="headerlink" title="修改图标"></a>修改图标</h3>          </div><p>在.pro文件中增加如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RC_ICONS = icon.ico <span class="comment">// icon.ico是你的ico文件，需要放到项目源代码目录下</span></span><br></pre></td></tr></table></figure><p>最后效果图如下：<br><img src="/2024/07/17/Qt-Upper-Computer-matlab/exe.png" alt="HelloWorld.exe"></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info no-icon&quot;&gt;
            &lt;h2 id=&quot;Qt-Creator-调用matlab函数&quot;&gt;&lt;a href=&quot;#Qt-Creator-调用matlab函数&quot; class=&quot;headerlink&quot; title=&quot;Qt Creator 调用matlab函数&quot;&gt;&lt;/a&gt;Qt Creator 调用matlab函数&lt;/h2&gt;
          &lt;/div&gt;

&lt;p&gt;本文主要实现利用Qt做一个调用matlab函数的上位机。Qt的UI界面比较简洁，只有两个函数input的输入口和一个send按钮。&lt;br&gt;Matlab的函数主要效果是通过相位设计算法反射面的相位数据，并将这些数据转换为指定格式，然后通过 UDP 协议发送到指定的目标设备。&lt;/p&gt;</summary>
    
    
    
    <category term="Qt" scheme="http://linferr.github.io/categories/Qt/"/>
    
    
    <category term="Guide" scheme="http://linferr.github.io/tags/Guide/"/>
    
    <category term="Tricky bugs" scheme="http://linferr.github.io/tags/Tricky-bugs/"/>
    
    <category term="matlab" scheme="http://linferr.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>Qt Upper Computer UDP</title>
    <link href="http://linferr.github.io/2024/07/11/Qt-Upper-Computer-UDP/"/>
    <id>http://linferr.github.io/2024/07/11/Qt-Upper-Computer-UDP/</id>
    <published>2024-07-11T08:39:37.000Z</published>
    <updated>2024-07-17T06:07:37.828Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon">            <h2 id="User-Datagram-Protocol-UDP"><a href="#User-Datagram-Protocol-UDP" class="headerlink" title="User Datagram Protocol(UDP)"></a>User Datagram Protocol(UDP)</h2>          </div><p>In this article, I will focus on implementing a simple UDP connection using Qt. The functionality includes auto-configuring the current IP address and available port, as well as bind, open, close, and send message operations. Additionally, it allows manual selection of the external device’s IP address.</p><span id="more"></span><div class="note default">            <h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3>          </div><p>You can refer to my previous article for project creation and UI setup:<a href="/2024/07/11/Qt-Upper-Computer-Serial-Port/" title="Qt Upper Computer Serial Port">[Qt Upper Computer Serial Port]</a></p><p>Here is the widget I created, which includes:</p><pre><code>Labels: Local Address, Local Port, Remote Address, Remote PortLineEdits: Fields for entering IP and portPushButtons: AutoConfig, Bind, Open, Close, SendTextEdit: For sending and receiving messages</code></pre><p><img src="/2024/07/11/Qt-Upper-Computer-UDP/udp_ui.png" alt="UDP ui"></p><div class="note default">            <h3 id="Implementing-the-Logic"><a href="#Implementing-the-Logic" class="headerlink" title="Implementing the Logic"></a>Implementing the Logic</h3>          </div><h4 id="Qtudp-pro"><a href="#Qtudp-pro" class="headerlink" title="Qtudp.pro"></a>Qtudp.pro</h4><p>In .pro, we add this line to use a new class called “network”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += network</span><br></pre></td></tr></table></figure><p>To implement the UDP connection, we will create a class named CUdpSocket that encapsulates all the necessary functionalities. This class will handle the UDP socket operations such as binding, sending data, receiving data, and closing the connection. Below are the detailed steps and code implementation.</p><h4 id="UDPSocket-h"><a href="#UDPSocket-h" class="headerlink" title="UDPSocket.h"></a>UDPSocket.h</h4><p>In the header file, we define the CUdpSocket class and declare its member functions and variables.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> UDPSOCKET_H <span class="comment">// Prevent duplicate inclusion of the header file.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UDPSOCKET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QObject&gt;</span> <span class="comment">// Qt core class that provides the signal and slot mechanism.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QUdpSocket&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QHostAddress&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a class named CUdpSocket, inheriting from QObject</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CUdpSocket</span> : <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Q_OBJECT is a Qt macro that enables the signal and slot mechanism.</span></span><br><span class="line">    <span class="comment">// If you use signals and slots in a class, you must include the Q_OBJECT macro in the class definition.</span></span><br><span class="line">    <span class="comment">// This macro is part of Qt&#x27;s meta-object system, providing runtime type information and dynamic property system.</span></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// The explicit keyword prevents implicit conversions.</span></span><br><span class="line">    <span class="comment">// CUdpSocket(QObject *parent = nullptr) is a constructor that initializes the object. In Qt, most objects have a parent object, which is responsible for memory management. The parent parameter defaults to nullptr, indicating no parent object.</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">CUdpSocket</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="comment">// Destructor to release resources when the object is destroyed.</span></span><br><span class="line">    ~<span class="built_in">CUdpSocket</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Class member functions. The specifics will be implemented in the .cpp file.</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bind</span><span class="params">(<span class="type">const</span> QHostAddress &amp;address, ushort port)</span></span>; <span class="comment">// Bind the local IP and port information</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendData</span><span class="params">(QString data)</span></span>;                         <span class="comment">// Send data</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setTargetInfo</span><span class="params">(QString ip, quint16 port)</span></span>;        <span class="comment">// Set the target host&#x27;s IP and port</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">close</span><span class="params">()</span></span>;                                        <span class="comment">// Close the UDP socket</span></span><br><span class="line">    <span class="function">quint16 <span class="title">localPort</span><span class="params">()</span></span>;                                 <span class="comment">// Get the local port number</span></span><br><span class="line">    <span class="function">QString <span class="title">lastError</span><span class="params">()</span></span>;                                 <span class="comment">// Get the last error message</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resetSocket</span><span class="params">()</span></span>;                                  <span class="comment">// Reset the socket</span></span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    <span class="comment">// Signal to transmit received data</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">recvDataSignal</span><span class="params">(QString data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">    <span class="comment">// Slot function to read data</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">on_readyReadData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// Private member variables for encapsulation, ensuring the integrity and security of the class&#x27;s internal state.</span></span><br><span class="line">    QUdpSocket *m_sock;        <span class="comment">// Pointer to the UDP socket</span></span><br><span class="line">    QHostAddress m_hostAddr;   <span class="comment">// Target address object</span></span><br><span class="line">    quint16 m_port;            <span class="comment">// Target port number</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// UDPSOCKET_H</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this header file:</p><p>1.We prevent duplicate inclusion using #ifndef, #define, and #endif preprocessor directives.<br>2. We include necessary Qt headers: QObject, QUdpSocket, and QHostAddress.<br>3. We define the CUdpSocket class that inherits from QObject.<br>4. We declare the constructor, destructor, and several member functions to handle UDP operations.<br>5. We use the Q_OBJECT macro to enable Qt’s signal and slot mechanism.<br>6. We declare signals and slots to handle asynchronous data reception.<br>7. We keep member variables private for data encapsulation.</p><h4 id="UDPSocket-cpp"><a href="#UDPSocket-cpp" class="headerlink" title="UDPSocket.cpp"></a>UDPSocket.cpp</h4><p>In the source file, we implement the member functions declared in the header file “UDPSocket.h”.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UdpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">CUdpSocket::<span class="built_in">CUdpSocket</span>(QObject *parent) : <span class="built_in">QObject</span>(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Allocate memory for the UDP socket</span></span><br><span class="line">    m_sock = <span class="keyword">new</span> QUdpSocket;</span><br><span class="line">    <span class="comment">// Connect the data read signal slot</span></span><br><span class="line">    <span class="built_in">connect</span>(m_sock, &amp;QUdpSocket::readyRead, <span class="keyword">this</span>, &amp;CUdpSocket::on_readyReadData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CUdpSocket::~<span class="built_in">CUdpSocket</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Release the memory allocated for the UDP socket</span></span><br><span class="line">    <span class="keyword">delete</span> m_sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">CUdpSocket::bind</span><span class="params">(<span class="type">const</span> QHostAddress &amp;address, ushort port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">bind</span>(address, port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::sendData</span><span class="params">(QString data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Send the passed data to the specified target</span></span><br><span class="line">    m_sock-&gt;<span class="built_in">writeDatagram</span>(data.<span class="built_in">toUtf8</span>(), m_hostAddr, m_port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::setTargetInfo</span><span class="params">(QString ip, quint16 port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_hostAddr = <span class="built_in">QHostAddress</span>(ip);</span><br><span class="line">    m_port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">quint16 <span class="title">CUdpSocket::localPort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">localPort</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::on_readyReadData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Check if there are any pending datagrams and retrieve them in a loop</span></span><br><span class="line">    <span class="keyword">while</span>(m_sock-&gt;<span class="built_in">hasPendingDatagrams</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Create a container for storing data and set its length to the size of the pending datagram</span></span><br><span class="line">        QByteArray data;</span><br><span class="line">        data.<span class="built_in">resize</span>(m_sock-&gt;<span class="built_in">pendingDatagramSize</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read the data and save the sender&#x27;s address and port (for specifying the sending location)</span></span><br><span class="line">        m_sock-&gt;<span class="built_in">readDatagram</span>(data.<span class="built_in">data</span>(), data.<span class="built_in">size</span>(), &amp;m_hostAddr, &amp;m_port);</span><br><span class="line">        <span class="comment">// Emit a signal with the received data</span></span><br><span class="line">        <span class="function">emit <span class="title">recvDataSignal</span><span class="params">(QString(data))</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::close</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    m_sock-&gt;<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">CUdpSocket::lastError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_sock-&gt;<span class="built_in">errorString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CUdpSocket::resetSocket</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_sock-&gt;<span class="built_in">state</span>() != QAbstractSocket::UnconnectedState) &#123;</span><br><span class="line">        m_sock-&gt;<span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In this source file:</p><ol><li>We include the header file UdpSocket.h.</li><li>In the constructor, we create a new QUdpSocket instance and connect its readyRead signal to the on_readyReadData slot.</li><li>The destructor releases the memory allocated for the UDP socket.</li><li>The bind function binds the socket to the specified IP address and port.</li><li>The sendData function sends data to the target IP and port.</li><li>The setTargetInfo function sets the target IP and port for sending data.</li><li>The localPort function returns the local port number.</li><li>The on_readyReadData slot handles incoming data by reading the datagrams and emitting a signal with the received data.</li><li>The close function closes the socket.</li><li>The lastError function returns the last error message.</li><li>The resetSocket function aborts the socket if it’s not in the unconnected state.</li></ol><h4 id="Widget-h"><a href="#Widget-h" class="headerlink" title="Widget.h"></a>Widget.h</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> WIDGET_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIDGET_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QWidget&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;UdpSocket.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span>;</span><br><span class="line">&#125;</span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Widget</span> : <span class="keyword">public</span> QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Widget</span>(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~<span class="built_in">Widget</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Bind_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Open_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Close_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Send_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">AutoConfig_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">handleReceivedData</span><span class="params">(QString data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui;</span><br><span class="line">    CUdpSocket *udpSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">getLocalIPAddress</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// WIDGET_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QNetworkInterface&gt;</span></span></span><br><span class="line"></span><br><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    ,<span class="built_in">udpSocket</span>(<span class="keyword">new</span> <span class="built_in">CUdpSocket</span>(<span class="keyword">this</span>))</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect the received data signal to the handler</span></span><br><span class="line">    <span class="built_in">connect</span>(udpSocket, &amp;CUdpSocket::recvDataSignal, <span class="keyword">this</span>, &amp;Widget::handleReceivedData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect buttons to their respective slots</span></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Bind, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Bind_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Open, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Open_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Close, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Close_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;Send, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::Send_clicked);</span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;AutoConfig, &amp;QPushButton::clicked, <span class="keyword">this</span>, &amp;Widget::AutoConfig_clicked);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Automatically detect and set the local IP address</span></span><br><span class="line">    <span class="comment">// ui-&gt;lineLocalAddr-&gt;setText(getLocalIPAddress());</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~<span class="built_in">Widget</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">QString <span class="title">Widget::getLocalIPAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QList&lt;QHostAddress&gt; ipAddressesList = QNetworkInterface::<span class="built_in">allAddresses</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ipAddressesList.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ipAddressesList.<span class="built_in">at</span>(i) != QHostAddress::LocalHost &amp;&amp;</span><br><span class="line">            ipAddressesList.<span class="built_in">at</span>(i).<span class="built_in">toIPv4Address</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ipAddressesList.<span class="built_in">at</span>(i).<span class="built_in">toString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">QHostAddress</span>(QHostAddress::LocalHost).<span class="built_in">toString</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Bind_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString localAddress = ui-&gt;lineLocalAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort localPort = ui-&gt;lineLocalPort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">resetSocket</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Trying to bind to IP:&quot;</span> &lt;&lt; localAddress &lt;&lt; <span class="string">&quot;Port:&quot;</span> &lt;&lt; localPort;</span><br><span class="line">    <span class="keyword">if</span> (udpSocket-&gt;<span class="built_in">bind</span>(<span class="built_in">QHostAddress</span>(localAddress), localPort)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Bind successful. Using IP: &quot;</span> + localAddress + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QString errorMsg = udpSocket-&gt;<span class="built_in">lastError</span>();</span><br><span class="line">        <span class="built_in">qDebug</span>() &lt;&lt; <span class="string">&quot;Bind failed with IP:&quot;</span> &lt;&lt; localAddress &lt;&lt; <span class="string">&quot;Port:&quot;</span> &lt;&lt; localPort &lt;&lt; <span class="string">&quot;Error:&quot;</span> &lt;&lt; errorMsg;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Bind failed: &quot;</span> + errorMsg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Open_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString remoteAddress = ui-&gt;lineRemoteAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort remotePort = ui-&gt;lineRemotePort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">setTargetInfo</span>(remoteAddress, remotePort);</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Remote address set to: &quot;</span> + remoteAddress + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(remotePort));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Close_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    udpSocket-&gt;<span class="built_in">close</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Socket closed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::Send_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QString remoteAddress = ui-&gt;lineRemoteAddr-&gt;<span class="built_in">text</span>();</span><br><span class="line">    ushort remotePort = ui-&gt;lineRemotePort-&gt;<span class="built_in">text</span>().<span class="built_in">toUShort</span>();</span><br><span class="line">    QString data = ui-&gt;textSend-&gt;<span class="built_in">toPlainText</span>();</span><br><span class="line"></span><br><span class="line">    udpSocket-&gt;<span class="built_in">setTargetInfo</span>(remoteAddress, remotePort);</span><br><span class="line">    udpSocket-&gt;<span class="built_in">sendData</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::handleReceivedData</span><span class="params">(QString data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;textReceive-&gt;<span class="built_in">append</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::AutoConfig_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// automatically obtain the local IP address and set</span></span><br><span class="line">    QString localIP = <span class="built_in">getLocalIPAddress</span>();</span><br><span class="line">    ui-&gt;lineLocalAddr-&gt;<span class="built_in">setText</span>(localIP);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// automatically assign port numbers</span></span><br><span class="line">    <span class="keyword">if</span> (udpSocket-&gt;<span class="built_in">bind</span>(<span class="built_in">QHostAddress</span>(localIP), <span class="number">0</span>)) &#123;</span><br><span class="line">        ushort localPort = udpSocket-&gt;<span class="built_in">localPort</span>();</span><br><span class="line">        ui-&gt;lineLocalPort-&gt;<span class="built_in">setText</span>(QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Auto configuration successful. Using IP: &quot;</span> + localIP + <span class="string">&quot; and port: &quot;</span> + QString::<span class="built_in">number</span>(localPort));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">warning</span>(<span class="keyword">this</span>, <span class="string">&quot;Warning&quot;</span>, <span class="string">&quot;Auto configuration failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Executable-Generation-and-Running-on-Windows"><a href="#Executable-Generation-and-Running-on-Windows" class="headerlink" title="Executable Generation and Running on Windows"></a>Executable Generation and Running on Windows</h3><p>You can refer to my previous article for exe file generation:<a href="/2024/07/11/Qt-Upper-Computer-Serial-Port/" title="Qt Upper Computer Serial Port">[Qt Upper Computer Serial Port]</a></p><div class="note info no-icon">            <h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2>          </div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><a href="#test-1">Test 1</a></li><li class="tab"><a href="#test-2">Test 2</a></li><li class="tab"><a href="#test-3">Test 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="test-1"><div class="note default">            <p><strong>Transmission on the Same Device</strong></p>          </div><p>First, test on your own computer. Use the existing autoconfig to automatically assign an IP address and port. Then, open another instance of the executable file, use the same IP, but choose a different port of your choice. Test the sending and receiving functionality between the two executable files.</p><p>Steps:</p><ol><li>Open the UDP executable on your computer.</li><li>Allow autoconfig to assign the IP address and port.</li><li>Open a second instance of the UDP executable.</li><li>Use the same IP address but choose a different port.</li><li>Test the message sending and receiving functionality between the two instances.</li></ol></div><div class="tab-pane" id="test-2"><div class="note default">            <p><strong>Transmission with an External Device</strong></p>          </div><p>Next, test the transmission between different devices. Start by testing between your computer and an external device. You can choose an external multi-functional network card and connect the two devices using an Ethernet cable.<br>Manually configure the IP address in: Network and Internet -&gt; Ethernet -&gt; IP Assignment, choose Manual, and configure your IPv4 address for the test.</p><p>Steps:</p><ol><li>Connect your computer and the external device using an Ethernet cable.</li><li>Open the Network settings on both devices.</li><li>Go to Network and Internet -&gt; Ethernet -&gt; IP Assignment.</li><li>Select Manual and configure the IPv4 addresses on both devices.</li><li>Open the UDP executable on both devices.</li><li>Test the message sending and receiving functionality between the two devices.</li></ol></div><div class="tab-pane" id="test-3"><div class="note default">            <p><strong>Transmission between Two Computers</strong></p>          </div><p>To use the local IP addresses assigned by Windows, you need to configure the inbound and outbound rules in Windows Defender. This includes setting up the necessary ports for UDP communication.</p><p>Steps:</p><ol><li>Open Windows Defender on both computers.</li><li>Go to Advanced settings and create a new inbound rule.</li><li>Select Port and choose UDP.</li><li>Specify the local port you will use for the UDP communication.</li><li>Repeat the above steps to create a new outbound rule.</li><li>Open the UDP executable on both computers.</li><li>Use the local IP addresses assigned by Windows.</li><li>Test the message sending and receiving functionality between the two computers.</li></ol></div></div></div><div class="note info no-icon">            <h2 id="Future-work"><a href="#Future-work" class="headerlink" title="Future work"></a>Future work</h2>          </div><h3 id="Further-Optimizations"><a href="#Further-Optimizations" class="headerlink" title="Further Optimizations:"></a>Further Optimizations:</h3><ol><li>Clear the input box after sending a message.</li><li>Add a “Clear” button to empty the receive box.</li></ol><h3 id="Hexadecimal-Transmission"><a href="#Hexadecimal-Transmission" class="headerlink" title="Hexadecimal Transmission:"></a>Hexadecimal Transmission:</h3><ol><li>Implement hexadecimal sending and receiving instead of ASCII.</li><li>Address the issue where sending FF remotely is converted to bytes&#x2F;ASCII, causing garbled text in the executable display.</li></ol><h3 id="MATLAB-DLL-Integration"><a href="#MATLAB-DLL-Integration" class="headerlink" title="MATLAB DLL Integration:"></a>MATLAB DLL Integration:</h3><ol><li>Implement the use of MATLAB DLL files.</li><li>Ensure the inputs remain consistent with MATLAB requirements.</li></ol>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info no-icon&quot;&gt;
            &lt;h2 id=&quot;User-Datagram-Protocol-UDP&quot;&gt;&lt;a href=&quot;#User-Datagram-Protocol-UDP&quot; class=&quot;headerlink&quot; title=&quot;User Datagram Protocol(UDP)&quot;&gt;&lt;/a&gt;User Datagram Protocol(UDP)&lt;/h2&gt;
          &lt;/div&gt;

&lt;p&gt;In this article, I will focus on implementing a simple UDP connection using Qt. The functionality includes auto-configuring the current IP address and available port, as well as bind, open, close, and send message operations. Additionally, it allows manual selection of the external device’s IP address.&lt;/p&gt;</summary>
    
    
    
    <category term="Qt" scheme="http://linferr.github.io/categories/Qt/"/>
    
    
    <category term="Guide" scheme="http://linferr.github.io/tags/Guide/"/>
    
    <category term="Tricky bugs" scheme="http://linferr.github.io/tags/Tricky-bugs/"/>
    
    <category term="UDP" scheme="http://linferr.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>Qt Upper Computer Serial Port</title>
    <link href="http://linferr.github.io/2024/07/11/Qt-Upper-Computer-Serial-Port/"/>
    <id>http://linferr.github.io/2024/07/11/Qt-Upper-Computer-Serial-Port/</id>
    <published>2024-07-11T07:33:15.000Z</published>
    <updated>2024-07-17T06:02:07.983Z</updated>
    
    <content type="html"><![CDATA[<div class="note info no-icon">            <h2 id="Serial-Port"><a href="#Serial-Port" class="headerlink" title="Serial Port"></a>Serial Port</h2>          </div><p>Recently, I’ve been learning how to develop an upper computer using Qt. Along the way, I’ve encountered numerous peculiar challenges and learned a great deal. I’ve decided to document these issues and their solutions in a series of articles. This serves as both a personal record for myself and as inspiration for others who may encounter similar hurdles.</p><span id="more"></span><div class="note default">            <h3 id="Project-Create-and-UI"><a href="#Project-Create-and-UI" class="headerlink" title="Project Create and UI"></a>Project Create and UI</h3>          </div><p>Create a new Widget project in Qt Creator.</p><ol><li>Select <strong>Qt Widgets Application</strong>.</li><li>Set the project name to <strong>Qtsp</strong>.</li><li>Choose <strong>qmake</strong> as the build system.</li><li>Use <strong>QWidget</strong> as the base class.</li><li>Continue with the default settings and click <strong>Next</strong>.</li></ol><p>Open the project and you will see a file called <code>widget.ui</code>. This file makes it easy to create a simple UI. Although you can write code in <code>widget.cpp</code> to create the interface, this guide is aimed at beginners, so we’ll use <code>widget.ui</code> for simplicity.</p><p>Here is the widget I created, which includes:</p><ul><li>Combobox</li><li>Label</li><li>PushButton</li><li>LineEdit</li><li>PlainTextEdit</li></ul><p><img src="/2024/07/11/Qt-Upper-Computer-Serial-Port/SPui.png" alt="Qt Serial Port UI"> </p><p>Also, remember to rename these widgets to make coding easier later on.<br><img src="/2024/07/11/Qt-Upper-Computer-Serial-Port/SPrenameui.png" alt="rename widget"></p><div class="note info no-icon">            <h3 id="QSerialPort"><a href="#QSerialPort" class="headerlink" title="QSerialPort"></a>QSerialPort</h3>          </div><h4 id="pro"><a href="#pro" class="headerlink" title=".pro"></a>.pro</h4><p>In Qt, the <code>QSerialPort</code> class is essential for serial communication. To use it, you need to add the following line to your <code>.pro</code> file:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QT       += serialport</span><br></pre></td></tr></table></figure><h4 id="Widget-h"><a href="#Widget-h" class="headerlink" title="Widget.h"></a>Widget.h</h4><p>Then, include the necessary headers in your source file:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPort&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QSerialPortInfo&gt;</span></span></span><br></pre></td></tr></table></figure><p>Also, there are some common issues with the QSerialPort library:</p><ol><li><p>The serial port library seems to be an independent module, which needs to be installed manually using the Qt Maintenance Tool. To choose the correct version, manually check in Project -&gt; Manage Kits. It seems like using </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qmake -v </span><br></pre></td></tr></table></figure><p>and Help -&gt; About Qt Creator are both not accurate. </p></li><li><p>If you have previously installed Anaconda, it might have set an old Qt version in the PATH, causing conflicts with the current kit.</p></li></ol><div class="note default">            <h3 id="Implementing-the-Logic"><a href="#Implementing-the-Logic" class="headerlink" title="Implementing the Logic"></a>Implementing the Logic</h3>          </div><h4 id="Widget-cpp"><a href="#Widget-cpp" class="headerlink" title="Widget.cpp"></a>Widget.cpp</h4><p>Define the following slots in your class:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">openButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">closeButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">sendButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">serialPortReadyRead</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Define the private members in your class:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::Widget *ui; </span><br><span class="line">    QSerialPort *serialPort; </span><br></pre></td></tr></table></figure><p>Here is the implementation in widget.cpp:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ui_widget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QMessageBox&gt;</span></span></span><br></pre></td></tr></table></figure><ol><li>Widget:: indicates that the following Widget function is a member function of the Widget class.</li><li>Widget is the name of the constructor. The constructor’s name must be the same as the class name.</li><li>(QWidget *parent) indicates the parameter list of the constructor. The constructor takes a pointer to a QWidget object named parent, which is used to specify the parent object.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Widget::<span class="built_in">Widget</span>(QWidget *parent)</span><br><span class="line">    <span class="comment">//  Initialization list to initialize the base class and member variables of the Widget class (i.e., the class variables)</span></span><br><span class="line"></span><br><span class="line">    : <span class="built_in">QWidget</span>(parent)</span><br><span class="line">    , <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::Widget)</span><br><span class="line">    , <span class="built_in">serialPort</span>(<span class="keyword">new</span> <span class="built_in">QSerialPort</span>(<span class="keyword">this</span>)) <span class="comment">// this points to the Widget object being created. When you use this in a member function, it points to the current object&#x27;s address.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor bofy</span></span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use QSerialPortInfo::availablePorts() to get available serial port information and add them to the ComboBox</span></span><br><span class="line">    QStringList serialNamePort;</span><br><span class="line">    foreach (<span class="type">const</span> QSerialPortInfo &amp;info, QSerialPortInfo::<span class="built_in">availablePorts</span>()) &#123;</span><br><span class="line">        serialNamePort &lt;&lt; info.<span class="built_in">portName</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Display available serial ports in the UI</span></span><br><span class="line">    ui-&gt;comBox-&gt;<span class="built_in">addItems</span>(serialNamePort);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// baud rate</span></span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;9600&quot;</span>);</span><br><span class="line">    ui-&gt;baudBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;115200&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data bit</span></span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    ui-&gt;dataBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stop bit</span></span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    ui-&gt;stopBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// parity</span></span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">    ui-&gt;parityBox-&gt;<span class="built_in">addItem</span>(<span class="string">&quot;Even&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect the serial port&#x27;s readyRead signal to the slot function serialPortReadyRead</span></span><br><span class="line">    <span class="built_in">connect</span>(serialPort, &amp;QSerialPort::readyRead, <span class="keyword">this</span>, &amp;Widget::serialPortReadyRead);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adjust the window size to fit the content</span></span><br><span class="line">    <span class="keyword">this</span>-&gt;<span class="built_in">adjustSize</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Implement the corresponding slot functions:</p><ol><li>Get the serial port parameters from the ComboBox and set them to the QSerialPort object.</li><li>Open the serial port, display a success message if successful, and an error message if failed.</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::openButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">setPortName</span>(ui-&gt;comBox-&gt;<span class="built_in">currentText</span>());</span><br><span class="line">    serialPort-&gt;<span class="built_in">setBaudRate</span>(ui-&gt;baudBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>());</span><br><span class="line">    <span class="comment">// QSerialPort::DataBits is an enum type function in the QSerialPort namespace to ensure the validity of the data bits</span></span><br><span class="line">    serialPort-&gt;<span class="built_in">setDataBits</span>(QSerialPort::<span class="built_in">DataBits</span>(ui-&gt;dataBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line">    serialPort-&gt;<span class="built_in">setStopBits</span>(QSerialPort::<span class="built_in">StopBits</span>(ui-&gt;stopBox-&gt;<span class="built_in">currentText</span>().<span class="built_in">toInt</span>()));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;None&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::NoParity);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ui-&gt;parityBox-&gt;<span class="built_in">currentText</span>() == <span class="string">&quot;Even&quot;</span>) &#123;</span><br><span class="line">        serialPort-&gt;<span class="built_in">setParity</span>(QSerialPort::EvenParity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (serialPort-&gt;<span class="built_in">open</span>(QIODevice::ReadWrite)) &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Serial port opened&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        QMessageBox::<span class="built_in">critical</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Failed to open serial port.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Close the serial port and display a message:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::closeButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">close</span>();</span><br><span class="line">    QMessageBox::<span class="built_in">information</span>(<span class="keyword">this</span>, <span class="string">&quot;Info&quot;</span>, <span class="string">&quot;Serial port closed&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Send the data entered by the user through the serial port:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::sendButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    serialPort-&gt;<span class="built_in">write</span>(ui-&gt;lineEdit-&gt;<span class="built_in">text</span>().<span class="built_in">toLocal8Bit</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Clear the content in the receiving area:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::clearButton_clicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Read the serial port data and display it in the receiving area</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Widget::serialPortReadyRead</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QByteArray data = serialPort-&gt;<span class="built_in">readAll</span>();</span><br><span class="line">    ui-&gt;plainTextEdit-&gt;<span class="built_in">appendPlainText</span>(<span class="built_in">QString</span>(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note default">            <h3 id="Executable-Generation-and-Running-on-Windows"><a href="#Executable-Generation-and-Running-on-Windows" class="headerlink" title="Executable Generation and Running on Windows"></a>Executable Generation and Running on Windows</h3>          </div><p>To generate the executable file and run it on Windows, build the project in release mode. Ensure you use the following command to set the PATH, prioritizing Qt’s directory over Anaconda’s, to match the Qt Creator suite:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="string">&quot;your Qt bin&quot;</span>;%PATH:<span class="string">&quot;your anaconda bin&quot;</span>;=%</span><br></pre></td></tr></table></figure><p>Also to use this to check:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> %PATH%</span><br></pre></td></tr></table></figure><p>Go to your Release folder and use windeployqt to generate all the necessary DLLs for the executable:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windeployqt Qtsp.exe</span><br></pre></td></tr></table></figure><p>If there are any missing files or errors, you can use a tool called “DependenciesGui” to check. </p><p>Common issues include missing DLLs like libstdc++-6.dll. Place these missing DLLs in the same directory as your executable.<br>Common missing DLLs:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">libstdc++-6.dll</span><br><span class="line">libgcc_s_seh-1.dll</span><br><span class="line">libwinpthread-1.dll</span><br></pre></td></tr></table></figure><div class="note info no-icon">            <h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2>          </div><div class="note default">            <h3 id="Serial-Port-Detection-Issues-ESP8266"><a href="#Serial-Port-Detection-Issues-ESP8266" class="headerlink" title="Serial Port Detection Issues(ESP8266)"></a>Serial Port Detection Issues(ESP8266)</h3>          </div><p>When attempting to detect the serial port with the executable and PuTTY, neither could recognize the ESP8266. However, the Arduino IDE successfully uploads code and enables basic WiFi functionality. This ruled out serial port occupation (confirmed via regedit) and confirmed that NodeMCU can perform firmware flashing. The issue is likely due to the USB cable being used.</p><p>Since both PuTTY and my executable use the serial port, a USB-to-Serial (TTL) adapter is likely needed. A standard USB-to-Type-C cable is insufficient. For testing, use either a USB-to-Serial (TTL) adapter or an Arduino board as an intermediary (this should work).</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info no-icon&quot;&gt;
            &lt;h2 id=&quot;Serial-Port&quot;&gt;&lt;a href=&quot;#Serial-Port&quot; class=&quot;headerlink&quot; title=&quot;Serial Port&quot;&gt;&lt;/a&gt;Serial Port&lt;/h2&gt;
          &lt;/div&gt;

&lt;p&gt;Recently, I’ve been learning how to develop an upper computer using Qt. Along the way, I’ve encountered numerous peculiar challenges and learned a great deal. I’ve decided to document these issues and their solutions in a series of articles. This serves as both a personal record for myself and as inspiration for others who may encounter similar hurdles.&lt;/p&gt;</summary>
    
    
    
    <category term="Qt" scheme="http://linferr.github.io/categories/Qt/"/>
    
    
    <category term="Guide" scheme="http://linferr.github.io/tags/Guide/"/>
    
    <category term="Serial Port" scheme="http://linferr.github.io/tags/Serial-Port/"/>
    
    <category term="Tricky bugs" scheme="http://linferr.github.io/tags/Tricky-bugs/"/>
    
  </entry>
  
</feed>
